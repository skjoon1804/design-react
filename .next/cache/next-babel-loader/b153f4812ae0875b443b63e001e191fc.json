{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const GET_ALL_SUCCESS = 'GET_ALL_SUCCESS';\nexport const GET_ALL_FAILURE = 'GET_ALL_FAILURE';\nexport const PUT_SUCCESS = 'PUT_SUCCESS';\nexport const PUT_FAILURE = 'PUT_FAILURE';\nconst REQUEST_STATUS = {\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error'\n};\n\nconst requestReducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_ALL_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: REQUEST_STATUS.SUCCESS,\n        speakers: action.speakers\n      });\n\n    case 'UPDATE_STATUS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: action.status\n      });\n  }\n};","map":{"version":3,"sources":["/Users/oj/Desktop/pluralsight/design-react/src/actions/request.js"],"names":["GET_ALL_SUCCESS","GET_ALL_FAILURE","PUT_SUCCESS","PUT_FAILURE","REQUEST_STATUS","LOADING","SUCCESS","ERROR","requestReducer","state","action","type","status","speakers"],"mappings":";;;;;;AAAA,OAAO,MAAMA,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,MAAMC,cAAc,GAAG;AACnBC,EAAAA,OAAO,EAAE,SADU;AAEnBC,EAAAA,OAAO,EAAE,SAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAAvB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,iBAAL;AACI,6CACOF,KADP;AAEIG,QAAAA,MAAM,EAAER,cAAc,CAACE,OAF3B;AAGIO,QAAAA,QAAQ,EAAEH,MAAM,CAACG;AAHrB;;AAKJ,SAAK,eAAL;AACI,6CACOJ,KADP;AAEIG,QAAAA,MAAM,EAAEF,MAAM,CAACE;AAFnB;AARR;AAaH,CAdD","sourcesContent":["export const GET_ALL_SUCCESS = 'GET_ALL_SUCCESS';\nexport const GET_ALL_FAILURE = 'GET_ALL_FAILURE';\nexport const PUT_SUCCESS = 'PUT_SUCCESS';\nexport const PUT_FAILURE = 'PUT_FAILURE';\n\nconst REQUEST_STATUS = {\n    LOADING: 'loading',\n    SUCCESS: 'success',\n    ERROR: 'error'\n};\n\nconst requestReducer = (state, action) => {\n    switch (action.type) {\n        case 'GET_ALL_SUCCESS':\n            return {\n                ...state,\n                status: REQUEST_STATUS.SUCCESS,\n                speakers: action.speakers,\n            };\n        case 'UPDATE_STATUS':\n            return {\n                ...state,\n                status: action.status,\n            }\n    }\n}"]},"metadata":{},"sourceType":"module"}